"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[696],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>p});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(t),f=a,p=d["".concat(s,".").concat(f)]||d[f]||m[f]||i;return t?r.createElement(p,o(o({ref:n},u),{},{components:t})):r.createElement(p,o({ref:n},u))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=f;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},96704:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=t(87462),a=(t(67294),t(3905));const i={sidebar_position:3},o="Middleware",l={unversionedId:"communication/middleware",id:"communication/middleware",title:"Middleware",description:"Weaver has support for middleware due to how its networking is implemented. This allows for any data sent to the server, or to the client, to be passed through a transformation layer where the resulting data is then sent/received.",source:"@site/docs/communication/middleware.md",sourceDirName:"communication",slug:"/communication/middleware",permalink:"/Weaver/docs/communication/middleware",draft:!1,editUrl:"https://github.com/paracosm-daemon/weaver/edit/main/docs/communication/middleware.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Controllers",permalink:"/Weaver/docs/communication/controllers"},next:{title:"Execution Model",permalink:"/Weaver/docs/extras/execution-model"}},s={},c=[{value:"Services",id:"services",level:2},{value:"Controllers",id:"controllers",level:2}],u={toc:c},d="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"middleware"},"Middleware"),(0,a.kt)("p",null,"Weaver has support for ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Middleware"},"middleware")," due to how its networking is implemented. This allows for any data sent to the server, or to the client, to be passed through a transformation layer where the resulting data is then sent/received."),(0,a.kt)("p",null,"Common uses for middleware are intercepting network traffic, such as verifying client packets or simply logging any data that signals or methods receive. Here is an example of middleware which logs any traffic going to and from the server:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'Weaver.Start{\n    Middleware = {\n        Inbound = function(client: Player, ...): (boolean, ...any)\n            print(client, "sent the following arguments to the server:", ...)\n            return true, ...\n        end;\n        Outbound = function(client: Player, ...): (boolean, ...any)\n            print("The server sent", client, "the following arguments:" ...)\n            return true, ...\n        end;\n    }\n}\n')),(0,a.kt)("p",null,"Weaver also allows for as many inbound/outbound functions as needed. By specifying a table rather than a single function to either layer, you can transform the arguments further. This is also where the first value is important, as it specifies whether it should continue the chain of middleware."),(0,a.kt)("p",null,"Here is an example of middleware being used to verify a packet sent by clients via ",(0,a.kt)("a",{parentName:"p",href:"https://create.roblox.com/docs/reference/engine/classes/Workspace#GetServerTimeNow"},(0,a.kt)("inlineCode",{parentName:"a"},"workspace:GetServerTimeNow()")),". Note that Weaver also runs middleware from first-to-last."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'Weaver.Start{\n    Middleware = {\n        Inbound =\n        {\n            function(client: Player, sentAt: number, ...): (boolean, boolean, ...any)\n                local currentTime: number = workspace:GetServerTimeNow()\n                if (currentTime - sentAt) > (0.1 + client:GetNetworkPing()) then\n                    warn(client, "sent a packet that was delayed!")\n                    -- This discontinues the chain,\n                    -- also sending false plus an error message\n                    return false, false, "Delayed packet!"\n                end\n                -- This continues the chain,\n                -- passing through all data that the client sent through\n                return true, ...\n            end;\n            function(client: Player, ...): (boolean, boolean, ...any)\n                print(client, "sent the following data:", ...)\n                -- This continues the chain,\n                -- sending a second true to indicate that this was a successful invocation,\n                -- also chaining on the arguments sent by the client\n                return true, true, ...\n            end;\n        };\n    }\n}\n')),(0,a.kt)("h2",{id:"services"},"Services"),(0,a.kt)("p",null,"Services can also have their own middleware specified. ",(0,a.kt)("strong",{parentName:"p"},"This will override the global middleware set in the ",(0,a.kt)("a",{parentName:"strong",href:"/api/WeaverServer"},"WeaverServer")," handler"),". Let's say that we have a service dedicated to handling packets sent by clients to the server. Here's how the service may look:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local senders: { [Player]: number } = {}\nlocal NetworkService = Weaver.CreateService{\n    Name = "NetworkService";\n    Client =\n    {\n        -- This will be a receiver for our middleware\n        Receiver = Weaver.CreateRemoteSignal();\n    };\n    -- Middleware can also be specified outside of CreateService.\n    -- This allows for use of the service table in your inbound functions\n    Middleware =\n    {\n        Inbound =\n        {\n            -- First, we check for the last time this client sent a packet\n            function(client: Player, ...): (boolean, ...any)\n                local currentTime: number = os.clock()\n                local lastSent: number? = senders[client]\n\n                if lastSent and ((currentTime - lastSent) < 0.5) then\n                    warn(client, "is being rate limited!")\n                    return false\n                end\n                -- In practice, you may want to remove client from the senders dictionary\n                -- when they leave via Players.PlayerRemoving\n                senders[client] = currentTime\n                return true, ...\n            end;\n            -- Then, we filter the request to make sure we\'ve received a buffer\n            function(client: Player, ...): (boolean, buffer?)\n                -- This will simply just use the first argument in ...;\n                -- essentially select(1, ...)\n                local packet: any? = ...\n                if typeof(packet) == "buffer" then\n                    return true, packet\n                end\n                warn(client, "tried to send a bad buffer!")\n                return false\n            end;\n            -- After this, it\'s sent to the receiver!\n        }\n    };\n}\n\nfunction NetworkService:WeaverInit(): ()\n    -- Our packet is guaranteed to either be a buffer or nil, due to our inbound middleware\n    self.Client.Receiver:Connect(function(client: Player, packet: buffer?): ()\n        -- First, check if it\'s null\n        if not packet then\n            warn(client, "sent invalid data!")\n            return\n        end\n        -- If it isn\'t, we have a valid packet and can carry on with it\n        -- ...\n    end)\nend\n')),(0,a.kt)("p",null,"This applies Weaver's middleware in a way where a service will only accept data from clients when it's in the form of a ",(0,a.kt)("a",{parentName:"p",href:"https://create.roblox.com/docs/reference/engine/libraries/buffer"},"buffer"),", alongside rate limiting clients to make sure they aren't sending requests too fast. This is only one of the many use cases for middleware."),(0,a.kt)("h2",{id:"controllers"},"Controllers"),(0,a.kt)("p",null,"Middleware can also be specified for services within controllers. Do note that the middleware table may only be specified within the ",(0,a.kt)("a",{parentName:"p",href:"/api/WeaverClient"},"WeaverClient")," handler."),(0,a.kt)("p",null,"If we wanted to handle outbound requests to our supposed NetworkService, we could do the following in our handler:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local Weaver = require(Weaver)\n\nWeaver.AddControllers(script.Runtime)\nWeaver.Start{\n    Middleware =\n    {\n        Services =\n        {\n            NetworkService =\n            {\n                -- Our outbound request will be converted into a buffer!\n                -- For simplicity, let\'s just say that this only accepts 16-bit integers\n                Outbound = function(...): (boolean, buffer)\n                    local arguments: { any } = { ... }\n                    -- We create our packet\n                    -- A 16-bit integer is 2 bytes, so we multiply 2 by our argument count\n                    local packet: buffer = buffer.create(2 * #arguments)\n                    for index: number, argument: any in arguments do\n                        -- Assertion to make sure our arguments are indeed numbers\n                        assert(\n                            typeof(argument) == "number",\n                            string.format(\n                                "The specified argument at index %i is not a number! got %*",\n                                index,\n                                argument\n                            )\n                        )\n                        -- Then, we write our number\n                        buffer.writei16(\n                            packet,\n                            -- Buffers start at 0, so subtract 1 from index,\n                            -- then account for the 16-bit integer size in bytes\n                            2 * (index - 1),\n                            argument\n                        )\n                    end\n                    return true, packet\n                end;\n            };\n        };\n    };\n}\n')),(0,a.kt)("p",null,"Note that adding middleware to specific services will also override the global inbound/outbound middleware set by the ",(0,a.kt)("a",{parentName:"p",href:"/api/WeaverClient"},"WeaverClient")," handler."))}m.isMDXComponent=!0}}]);