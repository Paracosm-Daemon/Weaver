"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"defaultSidebar":[{"type":"link","label":"Introduction","href":"/Weaver/docs/intro","docId":"intro"},{"type":"category","label":"Getting Started","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Installation","href":"/Weaver/docs/getting-started/installation","docId":"getting-started/installation"},{"type":"link","label":"Basic Usage","href":"/Weaver/docs/getting-started/usage","docId":"getting-started/usage"}]},{"type":"category","label":"Communication","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Services","href":"/Weaver/docs/communication/services","docId":"communication/services"},{"type":"link","label":"Controllers","href":"/Weaver/docs/communication/controllers","docId":"communication/controllers"},{"type":"link","label":"Middleware","href":"/Weaver/docs/communication/middleware","docId":"communication/middleware"}]},{"type":"category","label":"Extras","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Execution Model","href":"/Weaver/docs/extras/execution-model","docId":"extras/execution-model"},{"type":"link","label":"Migration from Knit","href":"/Weaver/docs/extras/migrate","docId":"extras/migrate"}]}]},"docs":{"communication/controllers":{"id":"communication/controllers","title":"Controllers","description":"Controllers have a similar API and functionality to services. The only difference is that controllers and services are separate; controllers are the client\'s version of services. This means that they are also tables, and similarly to WeaverServices, are also able to be created in modules.","sidebar":"defaultSidebar"},"communication/middleware":{"id":"communication/middleware","title":"Middleware","description":"Weaver has support for middleware due to how its networking is implemented. This allows for any data sent to the server, or to the client, to be passed through a transformation layer where the resulting data is then sent/received.","sidebar":"defaultSidebar"},"communication/services":{"id":"communication/services","title":"Services","description":"WeaverServices are created through the WeaverServer. Services are simply tables, which makes them able to be created in modules, rather than needing to all be created in the same script, which is why Weaver\'s structure works so well.","sidebar":"defaultSidebar"},"extras/execution-model":{"id":"extras/execution-model","title":"Execution Model","description":"Lifecycle","sidebar":"defaultSidebar"},"extras/migrate":{"id":"extras/migrate","title":"Migration from Knit","description":"Generally, porting your code from Knit to Weaver should be simple, as the API is functionally similar. The only functions that may need to change are Knit.Start() and Knit.OnStart(); since Weaver doesn\'t use Promises, you may need to implement that yourself, or slightly modify your scripts.","sidebar":"defaultSidebar"},"getting-started/installation":{"id":"getting-started/installation","title":"Installation","description":"As of right now, Weaver is currently available on the Roblox Creator Store, but it is also installable as a Wally package.","sidebar":"defaultSidebar"},"getting-started/usage":{"id":"getting-started/usage","title":"Basic Usage","description":"Since Weaver works in a single-script architecture, it\'s best to start your projects off with it in mind. The most basic version of Weaver works by having one Script in ServerScriptService, and one LocalScript in StarterPlayerScripts, both starting Weaver using their respective WeaverService.Start() and WeaverClient.Start() methods. At the very least, both scripts should look like this:","sidebar":"defaultSidebar"},"intro":{"id":"intro","title":"Introduction","description":"Weaver is a fast, lightweight game framework meant for simple yet seamless communication between the server and the client. Weaver adheres by a single-script architecture, with a setup for the creation of services and controllers, allowing quick and painless communication from script-to-script without the need of BindableEvents/Functions.","sidebar":"defaultSidebar"}}}')}}]);